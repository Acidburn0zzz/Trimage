==========================================
todo app wise
- general refactoring
- use multiprocessing lib to take advantage of multicore/multi-CPU to compress
    multiple files simultaneously (threads have issues in Python; see "GIL")
- sys.exit(1) for errors -- how to handle? Not good to simply sys.exit() from
    any random part of code (can leave things in a mess)...
- consider context managers for handling compression, so as to keep operations
    atomic and/or rollback-able.
- add a recursive option on the command-line for use with -d
- make -f accept a list of files
- make the current verbose be "normal", and make -verbose print the commandline app prints as well.

todo else
- figure out dependencies for a .deb/how to make a .deb <- via launchpad
- figure out how to make mac and win versions (someone else :) <- via gui2exe

===========================================
later versions:
    animate compressing.gif
    allow selection/deletion of rows from table (and subsequently the imagelist)
    check for double files when adding
    punypng api? http://www.gracepointafterfive.com/punypng/api
    imagemagick/graphicsmagick?
    always on top option
    notification area widget

